La fonction printf retourne le nombre de caractères de la chaine créée.

(n est un entier positif)

% puis :

1 (optionnel):
	-n: le résultat imprimé à l'écran doit faire au moins n caractères,
		s'il est plus court, des espaces sont ajoutés à la fin.
		Il prime sur les autres flags.
	n: le résultat imprimé à l'écran doit faire au moins n caractères,
		s'il est plus court, des espaces sont ajoutés au début.
	0n: le résultat imprimé à l'écran doit faire au moins n caractères,
		s'il est plus court, des '0' sont ajoutés au début.
	.n: le '.' est appelé la "précision",
		pour les nombres: fonctionnement identique au flag "0n"
		pour les strings: affiche au maximum n caractères
		si aucun 'n' n'est donné ou que n <= 0 et que la valeur à afficher est 0,
		il n'affiche rien.

Pour chacun de ces flags, on peut remplacer n par *, qui va utiliser l'argument suivant pour valeur de n.

2:
	c: character
	s: string
	p: hexa au format 0x0123456789abcdef
	d: int
	i: int
	u: unsigned int
	x: hexa format 0123456789abcdef
	X: hexa format 0123456789ABCDEF
	%: affiche "%"

Exemples :
printf("%5d", 42);				= "   42"
printf("%-5d", 42);				= "42   "
printf("%05d", 42);				= "00042"
printf("%.5d", 42);				= "00042"
printf("%7s", "plouf");			= "  plouf"
printf("%-7s", "plouf");		= "plouf  "
printf("%07s", "plouf");		= "00plouf"
printf("%.17s", "plouf plouf");	= "plouf plouf"
printf("%.7s", "plouf plouf");	= "plouf p"
printf("%.*d", 5, 42);			= "00042"
printf("%.d", 0);				= ""
printf("%2$d %1$d", 5, 6);		= "6 5"
